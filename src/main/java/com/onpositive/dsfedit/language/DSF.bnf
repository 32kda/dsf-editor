{
  parserClass="com.onpositive.dsfedit.language.parser.DSFParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="DSF"
  psiImplClassSuffix="Impl"
  psiPackage="com.onpositive.dsfedit.language.parser.psi"
  psiImplPackage="com.onpositive.dsfedit.language.parser.psi.impl"

  elementTypeHolderClass="com.onpositive.dsfedit.language.parser.psi.DSFTypes"
  elementTypeClass="com.onpositive.dsfedit.language.psi.DSFElementType"
  tokenTypeClass="com.onpositive.dsfedit.language.psi.DSFTokenType"

  psiImplUtilClass="com.onpositive.dsfedit.language.psi.impl.DSFPsiUtil"
  tokens = [
    OBJECT_DEF_KEYWORD='OBJECT_DEF'
    POLYGON_DEF_KEYWORD='POLYGON_DEF'
    NETWORK_DEF_KEYWORD='NETWORK_DEF'
    PROPERTY_KEYWORD='PROPERTY'
    OBJECT_KEYWORD='OBJECT'
    BEGIN_POLYGON_KEYWORD='BEGIN_POLYGON'
    END_POLYGON_KEYWORD='END_POLYGON'
    BEGIN_WINDING_KEYWORD='BEGIN_WINDING'
    END_WINDING_KEYWORD='END_WINDING'
    POLYGON_POINT_KEYWORD='POLYGON_POINT'
    BEGIN_SEGMENT_KEYWORD='BEGIN_SEGMENT'
    END_SEGMENT_KEYWORD='END_SEGMENT'
    SHAPE_POINT_KEYWORD='SHAPE_POINT'
    SHAPE_POINT_CURVED_KEYWORD='SHAPE_POINT_CURVED'
    I_KEYWORD='I'
    A_KEYWORD='A'

    space='regexp:[ \t]+'
  ]

    implements("polygon|object")="com.onpositive.dsfedit.language.psi.DSFNamedElement"
    extends("polygon|object")="com.onpositive.dsfedit.language.psi.impl.DSFNamedElementImpl"
}

dsfFile ::= dsfHeader declarations entities

private ignored ::= comment | eol

dsfHeader ::= ('I'|'A') eol int_num eol id eol

private declarations ::= properties object_defs polygon_defs network_defs

properties ::= (property eol| ignored) *
property ::= 'PROPERTY' space? prop_id value_string 

object_defs ::= (object_def eol| ignored )*
object_def ::= 'OBJECT_DEF'  value_string {pin=1 recoverWhile=eol_recover}
polygon_defs ::= (polygon_def eol| ignored )*
polygon_def ::= 'POLYGON_DEF'  value_string {pin=1 recoverWhile=eol_recover}
network_defs ::= (network_def eol| ignored )*
network_def ::= 'NETWORK_DEF'  value_string {pin=1 recoverWhile=eol_recover}

private eol_recover ::= !eol

private entities ::= (entity? eol)*
private entity ::= object | polygon | segment  {recoverWhile=entity_recover}
private entity_recover ::= !eol

int_ref ::= int_num

object ::= 'OBJECT'  int_ref coords  float_num {pin=1 methods=[getName setName getNameIdentifier getReferences] }

polygon ::= 'BEGIN_POLYGON' int_ref polygon_header eol (polygon_winding)+ 'END_POLYGON' {pin=1 methods=[getName setName getNameIdentifier getReferences] }
private polygon_header ::= int_num  int_num
polygon_winding ::= 'BEGIN_WINDING' eol (polygon_point eol)+ 'END_WINDING' eol
polygon_point ::= 'POLYGON_POINT'  coords {pin=1 recoverWhile=polygon_recover}
private coords ::= float_num  float_num
private polygon_recover ::= ! eol

segment ::= 'BEGIN_SEGMENT'  segment_header  segment_coords eol segment_point* 'END_SEGMENT'  int_num  segment_coords {pin=1}
segment_header ::= int_num  int_num  int_num
private segment_coords ::= coords  float_num
segment_point ::= simple_point | curved_point
simple_point ::= 'SHAPE_POINT'  coords  float_num eol
curved_point ::= 'SHAPE_POINT_CURVED'  coords  float_num  coords  float_num eol

